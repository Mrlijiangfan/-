//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/C#/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""24a85037-0046-4d8b-8256-44a056d009a4"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""488d7587-d5f7-4357-980d-d9d13aa78815"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Choose"",
                    ""type"": ""Button"",
                    ""id"": ""05eaf1c2-e9ff-4e1c-a9ba-989d0ec60528"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""3cb5bbd2-95a2-48e8-8057-8674c3473bfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeUIByK"",
                    ""type"": ""Button"",
                    ""id"": ""e4a61791-20be-4b01-b859-8458fb0ce5f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RefreshByMouse"",
                    ""type"": ""Button"",
                    ""id"": ""81e177ec-640b-4891-9845-4a1e0dfd6d38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RefreshByJ"",
                    ""type"": ""Button"",
                    ""id"": ""ef4527bf-0ea6-4479-8bed-b5d91b07c5fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartFight"",
                    ""type"": ""Button"",
                    ""id"": ""ef4909fd-ee2f-459e-9230-4ccfb9d4b59b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6d7f790a-0b36-438b-abdf-3caf203eed8f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f3ecd552-88c4-40cc-934b-913c420d584b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea8d928f-fc70-4f3d-bf52-69244bffc7b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""848c504b-de4f-414a-972f-54a73b30da3f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""796e4a54-7326-49eb-a6c9-511fc74b3a3a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47774168-54dd-4e68-96c0-fe2a01f4dca0"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc03d1ca-34b9-4df3-866e-9606c44a0d68"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""706ad00e-6b39-462b-b6c3-484c9e2ccf4d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeUIByK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d73ab3f6-9030-4b82-8d1e-ac7c52412db9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RefreshByMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0918fdb4-fb50-436f-82af-7b24e7a34dcc"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RefreshByJ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76ebad3c-63fa-4923-a64f-528a85256d61"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_WASD = m_Player.FindAction("WASD", throwIfNotFound: true);
        m_Player_Choose = m_Player.FindAction("Choose", throwIfNotFound: true);
        m_Player_Exit = m_Player.FindAction("Exit", throwIfNotFound: true);
        m_Player_ChangeUIByK = m_Player.FindAction("ChangeUIByK", throwIfNotFound: true);
        m_Player_RefreshByMouse = m_Player.FindAction("RefreshByMouse", throwIfNotFound: true);
        m_Player_RefreshByJ = m_Player.FindAction("RefreshByJ", throwIfNotFound: true);
        m_Player_StartFight = m_Player.FindAction("StartFight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_WASD;
    private readonly InputAction m_Player_Choose;
    private readonly InputAction m_Player_Exit;
    private readonly InputAction m_Player_ChangeUIByK;
    private readonly InputAction m_Player_RefreshByMouse;
    private readonly InputAction m_Player_RefreshByJ;
    private readonly InputAction m_Player_StartFight;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_Player_WASD;
        public InputAction @Choose => m_Wrapper.m_Player_Choose;
        public InputAction @Exit => m_Wrapper.m_Player_Exit;
        public InputAction @ChangeUIByK => m_Wrapper.m_Player_ChangeUIByK;
        public InputAction @RefreshByMouse => m_Wrapper.m_Player_RefreshByMouse;
        public InputAction @RefreshByJ => m_Wrapper.m_Player_RefreshByJ;
        public InputAction @StartFight => m_Wrapper.m_Player_StartFight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Choose.started += instance.OnChoose;
            @Choose.performed += instance.OnChoose;
            @Choose.canceled += instance.OnChoose;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @ChangeUIByK.started += instance.OnChangeUIByK;
            @ChangeUIByK.performed += instance.OnChangeUIByK;
            @ChangeUIByK.canceled += instance.OnChangeUIByK;
            @RefreshByMouse.started += instance.OnRefreshByMouse;
            @RefreshByMouse.performed += instance.OnRefreshByMouse;
            @RefreshByMouse.canceled += instance.OnRefreshByMouse;
            @RefreshByJ.started += instance.OnRefreshByJ;
            @RefreshByJ.performed += instance.OnRefreshByJ;
            @RefreshByJ.canceled += instance.OnRefreshByJ;
            @StartFight.started += instance.OnStartFight;
            @StartFight.performed += instance.OnStartFight;
            @StartFight.canceled += instance.OnStartFight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Choose.started -= instance.OnChoose;
            @Choose.performed -= instance.OnChoose;
            @Choose.canceled -= instance.OnChoose;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @ChangeUIByK.started -= instance.OnChangeUIByK;
            @ChangeUIByK.performed -= instance.OnChangeUIByK;
            @ChangeUIByK.canceled -= instance.OnChangeUIByK;
            @RefreshByMouse.started -= instance.OnRefreshByMouse;
            @RefreshByMouse.performed -= instance.OnRefreshByMouse;
            @RefreshByMouse.canceled -= instance.OnRefreshByMouse;
            @RefreshByJ.started -= instance.OnRefreshByJ;
            @RefreshByJ.performed -= instance.OnRefreshByJ;
            @RefreshByJ.canceled -= instance.OnRefreshByJ;
            @StartFight.started -= instance.OnStartFight;
            @StartFight.performed -= instance.OnStartFight;
            @StartFight.canceled -= instance.OnStartFight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnChoose(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnChangeUIByK(InputAction.CallbackContext context);
        void OnRefreshByMouse(InputAction.CallbackContext context);
        void OnRefreshByJ(InputAction.CallbackContext context);
        void OnStartFight(InputAction.CallbackContext context);
    }
}
